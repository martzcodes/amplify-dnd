enum GameType {
  PUBLIC
  PRIVATE
}

type Game
  @model {
  id: ID!
  name: String!
  type: GameType!
  joinPassword: String
  dm: String!
  paused: Boolean
  autoPause: Boolean
  active: String
  lastAction: String
  initiative: [String!]
  discordNotification: String
  rooms: [GameRoom!] @connection(keyName: "byGame", fields: ["id"])
  doors: [GameDoor!] @connection(keyName: "byGame", fields: ["id"])
  areas: [GameArea!] @connection(keyName: "byGame", fields: ["id"])
  characters: [GameCharacter!] @connection(keyName: "byGame", fields: ["id"])
}

type Location {
  x: Int!
  y: Int!
}

enum SpecialGroundType {
  LAVA
  AQUA
  VOID
}

type GameRoomGround {
  type: SpecialGroundType!
  origin: Location!
  height: Int!
  width: Int!
}

type GameRoom
  @model
  @key(name: "byGame", fields: ["gameID"]) {
  id: ID!
  gameID: ID!
  name: String!
  origin: Location!
  height: Int!
  width: Int!
  defaultGroundType: String!
  specialGrounds: [GameRoomGround!]!
}

type CurrentMax {
  current: Int!
  max: Int!
}

type GameDoor
  @model
  @auth(rules: [{ allow: owner, operations: [create, delete] }])
  @key(name: "byGame", fields: ["gameID"]) {
  id: ID!
  gameID: ID!
  origin: Location!
  open: Boolean
  locked: Boolean
  northSouth: Boolean
  hidden: Boolean
}

type GameCharacter
  @model
  @auth(rules: [{ allow: owner, operations: [create, delete] }])
  @key(name: "byGame", fields: ["gameID"]) {
  id: ID!
  gameID: ID!
  name: String!
  npc: Boolean
  color: String!
  icon: String
  perception: Int!
  speed: CurrentMax!
  hp: CurrentMax!
  location: Location!
  vision: Int!
  actionUsed: Boolean!
  revealed: [String!]
}

type GameArea
  @model
  @key(name: "byGame", fields: ["gameID"]) {
  id: ID!
  gameID: ID!
  name: String!
  description: String!
  origin: Location!
  height: Int!
  width: Int!
  perception: Int!
  enabled: Boolean!
}